from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton,InputMediaPhoto
import asyncio
from concurrent.futures import ThreadPoolExecutor
from utils.brand import Brand
from scrappers import OtomotoScrapper
from callbacks import *
from dotenv import load_dotenv
import os
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from collections import defaultdict
from articles import Article
load_dotenv()
API_TOKEN = os.getenv("BOT_API_TOKEN")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
scrapper = OtomotoScrapper()
subscriptions = defaultdict(lambda: {"brand": None, "model": None})
storage = MemoryStorage()
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
class ArticleState:
    articles: list
    current_index: int

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data="subscribe")],
        [InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data="find_car")],
        [InlineKeyboardButton(text="–û –Ω–∞—Å", callback_data="about")],
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_kb)
@dp.message(Command("menu"))
async def send_welcome(message: types.Message):
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data="subscribe")],       
        [InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data="find_car")],
        [InlineKeyboardButton(text="–û –Ω–∞—Å", callback_data="about")],
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("–ú–µ–Ω—é:", reply_markup=inline_kb)



#<------------------------------------------------------------->
@dp.callback_query(lambda c: c.data == "subscribe")
async def process_subscribe(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –±—Ä–µ–Ω–¥–æ–≤
    btns = []
    for brand in scrapper.brands.keys():
        btns.append([InlineKeyboardButton(text=brand, callback_data=SubscribeBrandCallback(brand=brand).pack())])
    inline_kb = InlineKeyboardMarkup(inline_keyboard=btns)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:", reply_markup=inline_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query(SubscribeBrandCallback.filter())
async def process_choose_brand(callback_query: types.CallbackQuery, callback_data: BrandCallback, state: FSMContext):
    brand = callback_data.brand
    await state.update_data(subscribe_brand=brand)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π
    models = get_brand_models(brand)
    btns = []
    for model in models:
        btns.append([InlineKeyboardButton(text=model, callback_data=SubscribeModelCallback(model=model, brand=brand).pack())])
    inline_kb = InlineKeyboardMarkup(inline_keyboard=btns)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=inline_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query(SubscribeModelCallback.filter())
async def process_choose_model(callback_query: types.CallbackQuery, callback_data: SubscribeModelCallback, state: FSMContext):
    model = callback_data.model
    brand = callback_data.brand
    await callback_query.answer()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    subscriptions[callback_query.from_user.id] = {"brand": brand, "model": model}
    await bot.send_message(callback_query.from_user.id, f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {brand} {model}. –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç.")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(check_for_updates(callback_query.from_user.id, brand, model))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤
async def check_for_updates(user_id, brand_name, model_name):
    brand= scrapper.brands[brand_name]
    brand_id = brand.id
    model_id = brand.models[model_name] if model_name != "all" else None
    old_articles = await asyncio.to_thread(lambda: scrapper.get_articles(brand_id, model_id))
    await asyncio.sleep(10)
    while user_id in subscriptions:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã
        new_articles = await asyncio.to_thread(lambda: scrapper.get_articles(brand_id, model_id))

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏
        if new_articles and new_articles != old_articles:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for article in new_articles:
                if article not in old_articles:
                    await show_article(user_id, article, None)
            old_articles = new_articles

        # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(60)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query(lambda c: c.data == "unsubscribe")
async def process_unsubscribe(callback_query: types.CallbackQuery):
    if callback_query.from_user.id in subscriptions:
        del subscriptions[callback_query.from_user.id]
        await bot.send_message(callback_query.from_user.id, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.")
    else:
        await bot.send_message(callback_query.from_user.id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "help")
async def process_help(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await bot.send_message(callback_query.from_user.id, "–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.")



@dp.callback_query(lambda c: c.data == "find_car")
async def process_find_car(callback_query: types.CallbackQuery):
    await callback_query.answer()
    # –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ù–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–µ–Ω–¥—ã
    btns = []
    for brand in scrapper.brands.keys():
        btns.append([InlineKeyboardButton(text=brand, callback_data=BrandCallback(brand=brand).pack())])
    inline_kb = InlineKeyboardMarkup(inline_keyboard=btns)
    await bot.send_message(callback_query.from_user.id, "–ú–∞—Ä–∫–∏ –∞–≤—Ç–æ üöó:", reply_markup=inline_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
@dp.callback_query(BrandCallback.filter())
async def process_callback_brand_button(callback_query: types.CallbackQuery, callback_data:BrandCallback):
    await callback_query.answer() 
    models = get_brand_models(callback_data.brand)
    btns = []
    if models:
        for model in models:
            btns.append([InlineKeyboardButton(text=model, callback_data=ModelCallback(model=model, brand=callback_data.brand).pack())])
        btns.append([InlineKeyboardButton(text="–í—Å–µ –º–æ–¥–µ–ª–∏", callback_data=ModelCallback(model="all", brand=callback_data.brand).pack())])
        btns.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –±—Ä–µ–Ω–¥–∞–º", callback_data="back_to_brands")])
        inline_kb = InlineKeyboardMarkup(inline_keyboard=btns)    
        await bot.send_message(callback_query.from_user.id, f"–ú–æ–¥–µ–ª—å–Ω—ã–π —Ä—è–¥ –±—Ä—ç–Ω–¥–∞ {callback_query.data}", reply_markup=inline_kb)

@dp.callback_query(ModelCallback.filter())
async def process_callback_model_button(callback_query: types.CallbackQuery, callback_data: ModelCallback, state: FSMContext):
    brand = scrapper.brands[callback_data.brand]
    stop_event = asyncio.Event()
    loader_task = asyncio.create_task(show_loader(callback_query, stop_event))
    await callback_query.answer()
    try:
        model = brand.models[callback_data.model] if callback_data.model != "all" else None
        articles = await asyncio.to_thread(lambda: scrapper.get_articles(brand.id, model))
        stop_event.set()

        if articles:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await state.update_data(articles=articles, current_index=0)
            await show_article(callback_query.from_user.id, articles[0], 0)
    finally:
        await loader_task
async def show_article(user_id: int, article:Article, index:int | None):
    image_url = article.main_image.replace('320x240', '1280x720')
    title = article.title
    subtitle = article.description
    price = article.price
    caption = f"{title}\n\n{subtitle}\n\n{price}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ" –∏ "–ù–∞–∑–∞–¥"
    btns = []
    if index is not None:
        if index > 0:
            btns.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_article"))
        btns.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next_article"))

        inline_kb = InlineKeyboardMarkup(inline_keyboard=[btns])
        await bot.send_photo(user_id, photo=image_url, caption=caption, reply_markup=inline_kb)
    
    else:
        await bot.send_photo(user_id, photo=image_url, caption=caption)

@dp.callback_query(lambda c: c.data == "next_article")
async def next_article(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    articles = data['articles']
    current_index = data['current_index']

    if current_index < len(articles) - 1:
        current_index += 1
    else:
        current_index = 0
    await state.update_data(current_index=current_index)
    await update_article(callback_query.message, articles[current_index], current_index)
    

@dp.callback_query(lambda c: c.data == "prev_article")
async def prev_article(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    articles = data['articles']
    current_index = data['current_index']

    if current_index > 0:
        current_index -= 1
        await state.update_data(current_index=current_index)
        await update_article(callback_query.message, articles[current_index], current_index)

async def update_article(message: types.Message, article:Article, index):
    image_url = article.main_image.replace('320x240', '1280x720')
    title = article.title
    subtitle = article.description
    price = article.price
    caption = f"{title}\n\n{subtitle}\n\n{price}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ" –∏ "–ù–∞–∑–∞–¥"
    btns = []
    if index > 0:
        btns.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_article"))
    btns.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next_article"))

    inline_kb = InlineKeyboardMarkup(inline_keyboard=[btns])

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å)
    media = InputMediaPhoto(media=image_url, caption=caption)
    await message.edit_media(media=media, reply_markup=inline_kb)

@dp.callback_query(lambda c: c.data == "back_to_brands")
async def process_callback_back_to_brands(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—Ä–µ–Ω–¥–∞–º–∏
    btns = []
    for brand in scrapper.brands.keys():
        btns.append([InlineKeyboardButton(text=brand, callback_data=BrandCallback(brand=brand).pack())])
        
    inline_kb = InlineKeyboardMarkup(inline_keyboard=btns)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –±—Ä–µ–Ω–¥–æ–≤
    await bot.send_message(callback_query.from_user.id, "–ú–∞—Ä–∫–∏ –∞–≤—Ç–æ üöó:", reply_markup=inline_kb)

async def show_loader(callback_query: types.CallbackQuery, stop_event: asyncio.Event):
    loading_message = await bot.send_message(callback_query.from_user.id, "‚è≥ –ò–¥–µ—Ç –ø–æ–¥–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å OTOMOTO. –û–∂–∏–¥–∞–π—Ç–µ... ‚è≥")
    loader_emojis = ["‚è≥", "üîÑ", "‚åõ", "üîÉ"]
    
    i = 1
    last_message_text = ""  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    while not stop_event.is_set():  # –ü–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
        emoji = loader_emojis[i % len(loader_emojis)]  # –ú–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏
        new_message_text = f"{emoji} –ò–¥–µ—Ç –ø–æ–¥–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å OTOMOTO. –û–∂–∏–¥–∞–π—Ç–µ... {emoji}"

        if new_message_text != last_message_text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç
            await bot.edit_message_text(new_message_text, 
                                        chat_id=loading_message.chat.id, 
                                        message_id=loading_message.message_id)
            last_message_text = new_message_text  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É
        i += 1

    # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.delete_message(chat_id=loading_message.chat.id, message_id=loading_message.message_id)
    await callback_query.answer()

def get_brand_models(brand_name: str):
    brand = scrapper.brands.get(brand_name)
    if brand:
        return brand.get_models()
    else:
        return None
if __name__ == '__main__':
    dp.run_polling(bot)
